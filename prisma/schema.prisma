// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  // next-auth stuff
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // our stuff
  assignedTasks EventTaskOnUser[]
  audits        AuditLogEntry[]
  branches      BranchMember[]

  isIncredible Boolean @default(false)
}

model Branch {
  id        String          @id @default(uuid())
  name      String
  slug      String          @unique
  events    Event[]
  members   BranchMember[]
  roles     Role[]
  auditLogs AuditLogEntry[]
}

model BranchMember {
  id       String @id @default(uuid())
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId   String
  branch   Branch @relation(fields: [branchId], references: [id])
  branchId String

  linkRedeem EventLinkRedeem[]
  metadata   UserMetadata[]

  roles Role[]

  @@unique([userId, branchId])
}

model UserMetadata {
  key      String
  value    Float
  member   BranchMember @relation(fields: [memberId], onDelete: Cascade, onUpdate: Cascade, references: [id])
  memberId String

  @@unique([key, memberId])
}

model Event {
  id          String      @id @default(uuid())
  name        String
  description String
  slug        String      @unique
  date        DateTime
  links       EventLink[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  eventTask   EventTask[]
  branch      Branch      @relation(fields: [branchId], references: [id])
  branchId    String
}

model EventLink {
  id         String                  @id @default(uuid())
  name       String
  enabled    Boolean                 @default(true)
  code       String                  @unique
  redeemedBy EventLinkRedeem[]
  metadata   LinkApplyInstructions[]
  event      Event                   @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  eventId    String
  uses       Int?
  createdAt  DateTime                @default(now())
  updatedAt  DateTime                @updatedAt
}

model EventLinkRedeem {
  member            BranchMember          @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  memberId          String
  eventLink         EventLink             @relation(fields: [eventLinkId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  eventLinkId       String
  status            EventLinkRedeemStatus
  statusDescription String
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt

  @@unique([memberId, eventLinkId])
}

model LinkApplyInstructions {
  key         String
  value       Float
  action      KeyValueAction
  eventLink   EventLink      @relation(fields: [eventLinkId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  eventLinkId String

  @@unique([key, eventLinkId])
}

model EventTask {
  id          String            @id @default(uuid())
  name        String
  description String
  subTasks    EventTask[]       @relation("EventTaskToEventTask")
  eventTask   EventTask?        @relation("EventTaskToEventTask", fields: [eventTaskId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  eventTaskId String?
  event       Event             @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  eventId     String
  assignees   EventTaskOnUser[]
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model EventTaskOnUser {
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  eventTask   EventTask @relation(fields: [eventTaskId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  eventTaskId String

  @@id([userId, eventTaskId])
}

model AuditLogEntry {
  id          String         @id @default(uuid())
  branch      Branch         @relation(fields: [branchId], references: [id])
  branchId    String
  author      User           @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  authorId    String
  description String?
  action      AuditLogAction
  entity      AuditLogEntity
  createdAt   DateTime       @default(now())
}

model Role {
  id        String         @id @default(uuid())
  name      String
  branch    Branch         @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  branchId  String
  members   BranchMember[]
  perms     Perm[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

enum Perm {
  VIEW_MEMBER
  VIEW_EVENT_LINK
  VIEW_EVENT_TASK
  VIEW_AUDIT_LOG

  MANAGE_MEMBER
  MANAGE_EVENT
  MANAGE_EVENT_LINK
  MANAGE_EVENT_TASK
  MANAGE_BRANCH
}

enum AuditLogAction {
  CREATE
  UPDATE
  DELETE
}

enum AuditLogEntity {
  USER
  USER_METADATA
  EVENT
  EVENT_LINK
  EVENT_LINK_REDEEM
  EVENT_TASK
  BRANCH
}

enum KeyValueAction {
  INCREMENT
  DECREMENT
  SET
}

enum EventLinkRedeemStatus {
  SUCCESS
  FAILED
}
