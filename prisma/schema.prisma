// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_URL")
}

model Account {
  id                 String  @id @default(uuid()) @map("_id")
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(uuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String         @id @default(uuid()) @map("_id")
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  osis          String?        @unique
  role          Role           @default(MEMBER)
  events        EventsOnUser[]
}

model Event {
  id        String         @id @default(uuid()) @map("_id")
  // type     EventType      @default(PUBLIC)
  name      String
  enabled   Boolean        @default(true)
  linkCode  String?        @unique
  attendees EventsOnUser[]

  metadata  KeyValue[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model KeyValue {
  key     String @unique
  value   String
  event   Event  @relation(fields: [eventId], references: [id])
  eventId String @id @map("_id")
}

model EventsOnUser {
  id         String   @id @default(uuid()) @map("_id")
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  event      Event    @relation(fields: [eventId], references: [id])
  eventId    String
  assignedAt DateTime @default(now())
}

enum Role {
  MEMBER
  EXEC
}
